lms-project/
│
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/
│   │   │       └── example/
│   │   │           └── lms/
│   │   │               ├── controller/
│   │   │               │   ├── AdminController.java
│   │   │               │   └── UserController.java
│   │   │               ├── model/
│   │   │               │   ├── Admin.java
│   │   │               │   ├── Book.java
│   │   │               │   └── User.java
│   │   │               ├── repository/
│   │   │               │   ├── AdminRepository.java
│   │   │               │   ├── BookRepository.java
│   │   │               │   └── UserRepository.java
│   │   │               ├── service/
│   │   │               │   ├── AdminService.java
│   │   │               │   ├── BookService.java
│   │   │               │   └── UserService.java
│   │   │               └── exception/
│   │   │                   └── CustomException.java
│   │   └── resources/
│   │       ├── application.properties
│   │       └── data.sql
│   └── test/
│       └── java/
│           └── com/
│               └── example/
│                   └── lms/
│                       └── LmsApplicationTests.java
└── pom.xml




/////////////////////////////////////////////////////////

mainapp

package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {

	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
		System.out.println("exrrj");
	}

}







////////////////////////////////////////////////////////////////////////////////////////////

controllers

package com.example.demo.controller;

import java.util.List;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entity.Admin;
import com.example.demo.entity.Book;
import com.example.demo.entity.Userx;
import com.example.demo.service.AdminService;



@RestController
@RequestMapping("/adminx")
public class AdminController {
	
    private AdminService adminService;

    public AdminController(AdminService adminService) {
        this.adminService = adminService;
    }
    
    @PostMapping("/xx")
    public Admin createAdmin(@RequestBody Admin admin) {
        return adminService.createAdmin(admin);
    }

    @GetMapping("/books")
    public List<Book> getAllBooks() {
        return adminService.getAllBooks();
    }

    @GetMapping("/users")
    public List<Userx> getAllUsers() {
        return adminService.getAllUsers();
    }

    @GetMapping("/user/{id}")
    public Userx getUserById(@PathVariable Long id) {
        return adminService.getUserById(id);
    }

    @GetMapping("/book/{id}")
    public Book getBookById(@PathVariable Long id) {
        return adminService.getBookById(id);
    }
	
}











package com.example.demo.controller;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entity.Book;
import com.example.demo.entity.Userx;
import com.example.demo.service.AdminService;
import com.example.demo.service.BookService;

@RestController
@RequestMapping("/books")
public class BookController {

	private BookService bookService;
	
	 public BookController(BookService bookService) {
	        this.bookService = bookService;
	    }
	
	 @PostMapping("/createb")
	    public Book createBook(@RequestBody Book book) {
	        return bookService.createBook(book);
	    }
}
















package com.example.demo.controller;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entity.Admin;
import com.example.demo.entity.Userx;
import com.example.demo.service.UserxService;


	@RestController
	@RequestMapping("/user")
	public class UserController {
		
		 
	    private UserxService userService;
	    
	    public UserController(UserxService userService) {
	        this.userService = userService;
	    }

	    
	    @PostMapping("/create")
	    public Userx createUser(@RequestBody Userx user) {
	        return userService.createUser(user);
	    }
	    
	  
	    @PostMapping("/issue/{id}")
	    public String issueBook(@PathVariable Long id) {
	        return userService.issueBook(id);
	    }

	    @PostMapping("/return/{id}")
	    public String returnBook(@PathVariable Long id) {
	        return userService.returnBook(id);
	    }
	    
	  
	
}


////////////////////////////////////////////////////////////////////////////////////////


Entity

package com.example.demo.entity;

import java.time.LocalDate;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
@Entity
public class Admin {

	@Id
	@GeneratedValue(strategy =GenerationType.IDENTITY)
	private Long admid;
	
	//@Column(nullable =false)
	private String admname;

	public Admin() {
		super();
		// TODO Auto-generated constructor stub
	}

	public Admin(Long admid, String admname) {
		super();
		this.admid = admid;
		this.admname = admname;
	}

	public Long getAdmid() {
		return admid;
	}

	public void setAdmid(Long admid) {
		this.admid = admid;
	}

	public String getAdmname() {
		return admname;
	}

	public void setAdmname(String admname) {
		this.admname = admname;
	}
	
	
	
}














package com.example.demo.entity;

import java.time.LocalDate;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
@Entity
public class Book {

	@Id
	@GeneratedValue(strategy =GenerationType.IDENTITY)
	private Long bid;
	
	//@Column(nullable =false)
	private String btitle;
	//@Column(nullable =false)
	private String status;
	//@Column(nullable =false)
	private LocalDate bdate;
	//@Column(nullable =false)
	private LocalDate retdate;
	public Book() {
		super();
		// TODO Auto-generated constructor stub
	}
	public Book(Long bid, String btitle, String status, LocalDate bdate, LocalDate retdate) {
		super();
		this.bid = bid;
		this.btitle = btitle;
		this.status = status;
		this.bdate = bdate;
		this.retdate = retdate;
	}
	public Long getBid() {
		return bid;
	}
	public void setBid(Long bid) {
		this.bid = bid;
	}
	public String getBtitle() {
		return btitle;
	}
	public void setBtitle(String btitle) {
		this.btitle = btitle;
	}
	public String getStatus() {
		return status;
	}
	public void setStatus(String status) {
		this.status = status;
	}
	public LocalDate getBdate() {
		return bdate;
	}
	public void setBdate(LocalDate bdate) {
		this.bdate = bdate;
	}
	public LocalDate getRetdate() {
		return retdate;
	}
	public void setRetdate(LocalDate retdate) {
		this.retdate = retdate;
	}
	
	
	
}













package com.example.demo.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class Userx {

	@Id
	@GeneratedValue(strategy =GenerationType.IDENTITY)
	private Long uid;
	
	//@Column(nullable =false)
	private String uname;
	//@Column(nullable =false)
	private String uadd;
	//@Column(nullable =false)
	private Long mob;
	public Userx(Long uid, String uname, String uadd, Long mob) {
		super();
		this.uid = uid;
		this.uname = uname;
		this.uadd = uadd;
		this.mob = mob;
	}
	
	public Userx() {
		super();
		// TODO Auto-generated constructor stub
	}
	public Long getUid() {
		return uid;
	}
	public void setUid(Long uid) {
		this.uid = uid;
	}
	public String getUname() {
		return uname;
	}
	public void setUname(String uname) {
		this.uname = uname;
	}
	public String getUadd() {
		return uadd;
	}
	public void setUadd(String uadd) {
		this.uadd = uadd;
	}
	public Long getMob() {
		return mob;
	}
	public void setMob(Long mob) {
		this.mob = mob;
	}
}




/////////////////////////////////////////////////////////////////////////////////////////////////////////
exception


package com.example.demo.exception;

import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.http.HttpStatus;
@ControllerAdvice
public class CustomException extends RuntimeException{
    @ExceptionHandler(RuntimeException.class)
    @ResponseStatus(HttpStatus.NOT_FOUND)
    public String handleNotFound(RuntimeException ex) {
        return ex.getMessage();
    }

    // Additional exception handlers can be added here
    
    
}




/////////////////////////////////////////////////////////////////////////////////////////////////////////////
repository



package com.example.demo.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.example.demo.entity.Admin;
import com.example.demo.entity.Book;

public interface AdminRepository extends JpaRepository<Admin, Long>{

}

















package com.example.demo.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.example.demo.entity.Book;

public interface BookRepository extends JpaRepository<Book, Long> {

}















package com.example.demo.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.example.demo.entity.Book;
import com.example.demo.entity.Userx;

public interface UserxRepository extends JpaRepository<Userx, Long>{

	
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
services


package com.example.demo.service;

import org.springframework.stereotype.Service;

import com.example.demo.entity.Admin;
import com.example.demo.entity.Book;
import com.example.demo.entity.Userx;
import com.example.demo.repository.AdminRepository;
import com.example.demo.repository.BookRepository;
import com.example.demo.repository.UserxRepository;
import java.util.*;

@Service
public class AdminService {
	
	
	 private BookRepository bookRepository;
	    private UserxRepository userRepository;
	   private AdminRepository adminRepository;

	    public AdminService(BookRepository bookRepository, UserxRepository userRepository, AdminRepository adminRepository) {
	        this.bookRepository = bookRepository;
	        this.userRepository = userRepository;
	        this.userRepository = userRepository;
	    }
	    
	
	    public Admin createAdmin(Admin admin) {
	        return adminRepository.save(admin);
	    }

	    public List<Book> getAllBooks() {
	        return bookRepository.findAll();
	    }

	    public List<Userx> getAllUsers() {
	        return userRepository.findAll();
	    }

	    public Userx getUserById(Long id) {
	        return userRepository.findById(id).orElseThrow(() -> new RuntimeException("User not found"));
	    }

	    public Book getBookById(Long id) {
	        return bookRepository.findById(id).orElseThrow(() -> new RuntimeException("Book not found"));
	    }
	
	
	
}















package com.example.demo.service;

import org.springframework.stereotype.Service;

import com.example.demo.entity.Book;
import com.example.demo.entity.Userx;
import com.example.demo.repository.BookRepository;
import com.example.demo.repository.UserxRepository;

@Service
public class BookService {

	 private BookRepository bookRepository;
    
	   public BookService(BookRepository bookRepository) {
	        this.bookRepository = bookRepository;
	        
	    }
	
	   
	    public Book createBook(Book book) {
	        return bookRepository.save(book);
	    }
	    
}












package com.example.demo.service;

import org.springframework.stereotype.Service;

import com.example.demo.entity.Admin;
import com.example.demo.entity.Userx;
import com.example.demo.repository.BookRepository;
import com.example.demo.repository.UserxRepository;

@Service
public class UserxService {


    private BookRepository bookRepository;
    private UserxRepository userRepository;
    public UserxService(BookRepository bookRepository, UserxRepository userRepository) {
        this.bookRepository = bookRepository;
        this.userRepository= userRepository;
    }
    
   
    
    
    public Userx createUser(Userx user) {
        return userRepository.save(user);
    }
    
  public String issueBook(Long id) {
return "Book issued successfully";
}

public String returnBook(Long id) {
return "Book returned successfully";
}
	  
    
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
application.properties

spring.application.name=demo

spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=root
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>demo</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2024.0.0</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-config-server</artifactId>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>








